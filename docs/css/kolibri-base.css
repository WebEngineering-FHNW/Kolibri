/* make sure to keep in line with kolibriStyle.js */

@import "./kolibri-fonts.css";
@import "./kolibri-colors.css";



/*TODO InputTypeRange Change and make it more exchangeable*/
:root {
    --slider-width           : 18rem;
    --slider-height          : 0.8rem;
    --track-height           : 0.5rem;
    --thumb-size             : 1.5rem;
    --thumb-border           : 4px;
    --thumb-hover-scale      : 1.2;
    --thumb-glow-color       : rgba(134, 62, 255, 0.3);
    --thumb-outer-glow-color : rgba(96, 0, 255, 0.4);
    --track-fill-color       : #6000FF;
    --track-empty-color      : #EBECFE;
    --thumb-color            : #6000FF;
    --thumb-border-color     : #FFFFFF;
    --animation-duration     : 1.5s;
}


:root {
    padding:                 0;
    margin:                  0;
}
*, *::before, *::after {
    box-sizing: border-box;
}
::selection {
    background-color: var(--kolibri-color-select);
}

/* --- typography --- */

:root {
    font-family: var(--kb-font-family-default), system-ui;
}

header, h1, h2 {
    color: var(--kolibri-color-product);
}

header h1 {
    letter-spacing: 0.06em;
}

h1, h2, h3 {
    font-family: var(--kb-font-family-stylish),var(--kb-font-family-default), system-ui;
    font-weight: normal;
    text-wrap:   balance;
}

div, p, ul, ol, dl, form, fieldset, label {
    font-family: var(--kb-font-family-running-text),var(--kb-font-family-default), system-ui;
    letter-spacing: 0.03em;
    font-weight:    300;
}

input, button, textarea, select { /* interaction elements */
    font-family:    system-ui;
    letter-spacing: 0.03em;
    font-weight:    normal;
}

/* --- end typography --- */

/* --- default element appearance --- */
ul {
    padding-left:       1em;
}
ul li::marker {
  color:                var(--kolibri-color-primary-accent);
}

figure {
    margin-inline:      0;
}
figcaption {
    font-style:         italic;
    font-size:          var(--font-size-caption);
    text-align:         end;
}
em {                    /* emphasis looks like highlighted with text marker */
    position:           relative;
    padding-inline:     0.2em 0.3em;
    &::before {
        content:        "";
        position:       absolute;
        inset:          0 0 -.2em 0;  /* inline -3px leads to strange line-break issues */
        border-radius:  5% 5% 20% 20%;
        background-color: var(--kolibri-color-select);
        z-index:        -10;
        rotate:         -3deg;
        opacity:        60%;
    }
}

a[href^="http"]::after { /* external link */
    content:            " â†—";
    opacity:            .3;
}
/* --- end default element appearance --- */

/* --- default invalid handling --- */
:invalid {
    border-color: var(--kolibri-color-accent);
}
input:invalid {
    border-color: transparent transparent var(--kolibri-color-accent) transparent;
}
input[type=text]:invalid {
    color: var(--kolibri-color-accent);
}
/* We cannot use pseudo elements with input type text so we introduce an extra following span.
   Note that the html structure is label - span ( input - span) like in simpleInputProjector.
*/
label + span { /* the "holder" span for the input comes right after a label */
    position:   relative; /* such that we can position against it */
}
label + span > input + span.invalidation_marker {
    /* background is transparent by default, so nothing is shown unless input becomes invalid */
    position:       absolute; /* get it out of the stacking context */
    top:            0;
    left:           0;
    width:          1ch;
    aspect-ratio:   1;
    transform:      translateX(-5ch);
}
label + span > input:invalid + span.invalidation_marker {
    background-image: radial-gradient(circle closest-side, white 0%, white 20%, var(--kolibri-color-accent) 99%, transparent 100%);
    filter:           drop-shadow(0 0 .2ch var(--kolibri-color-accent));
    transform:        translateX(-1ch);
    transition:       transform 0.5s ease-out;
}
/* --- end default invalid handling --- */

/* --- logo handling -- */
/* The information about where the actual logo file is, the format, etc. should
   not be distributed over all the files but kept in one place.
   Since the logo is decorative only, we avoid having to set fake "alt" attributes.
 */

.kolibri-logo {         /* for getting the logo from svg file, inline SVG element is in kolibriStyle.js */
	width:              342px;                       /* default - you might want to override this with inline style */
	aspect-ratio:       1;
	background-image:   url("../img/logo/logo.svg"); /* keep in one place */
	background-repeat:  no-repeat;
    background-size:    contain;
}

/* --- fun stuff with the logo --- */

.kolibri-logo-anim {                                /* works for both svg file or svg element */
	animation:          kolibri_fly_in 2s ease;
    .wing {
        animation-name:            kolibri-flapping;
        animation-duration:        .2s;
        animation-iteration-count: 15;
        animation-direction:       reverse;
        animation-timing-function: ease-in;
        transform-origin:          45% 45%;
    }
}
@keyframes kolibri_fly_in {
	0% {
		transform: scaleX(-1)  scale(0.4) translateX(400%) rotate(-30deg);
	}
	60% {
		transform:             scale(0.6) translateX(300%) rotate(-30deg);
	}
	100% {
		transform:             scale(1.0) translateX(0)    rotate(  0deg) ;
	}
}
@keyframes kolibri-flapping {
      from {
          transform:            scaleX(1)  rotate(0deg);
      }
      to {
          transform:            scaleX(-1) rotate(30deg);
      }
 }

/* --- standard values --- */
@media (prefers-reduced-motion: reduce) {
    * {
        animation-duration: 0.01ms ;
  }
}
:root {
    /*
        Needed to animate e.g. from height:0 to height:auto.
        Works in Chrome but does not work in FF, Safari yet (dec.24).
    */
    interpolate-size: allow-keywords; /* progressive enhancement*/
}
/* --- end of standard values --- */

/* --- a11y support: the "skip" link --- */

a.skip-link { /* position top center */
    position:     absolute;
    z-index:      100;
    top:          1em;
    left:         50%;
    transform:    translateX(-50%);
}

/* hide if not tabbed to
   but in such a way that it still can be tabbed to */
a.skip-link:not(:focus):not(:active) {
    position:   absolute;
    overflow:   hidden;
    height:     1px;
    width:      1px;
    clip:       rect(0 0 0 0);
    clip-path:  inset(50%);
    white-space: nowrap;
}

/* --- end of a11y support --- */

/* --- utility classes --- */

.prosa {
    margin-inline:  auto;
    max-width:      70ch;
    text-rendering: optimizeLegibility;
    text-wrap:      pretty;
}

.font_numeric {
    font-variant-numeric: tabular-nums slashed-zero;
}
.font_numeric_fraction {
    font-variant-numeric: diagonal-fractions;
}

/* --- end of utility classes --- */


/* --- experimental popover and anchor positioning --- */

[popover] {             /* style that pops for all elements with popover attribute */
      flex-direction:     column;
      gap:                .5em;
      background-image:   linear-gradient(170deg, #4c4cc6 45%, darkblue 50%, darkblue 80%, #4c4cc6);
      box-shadow:         .2em .2em  1em 0 lightslategray,
                          0    0    .5em 0 white           inset;
      border-width:       0;
      border-radius:      .5em;
      color:              white;
      font-family:        system-ui;
      padding:            1em;
  }

  :popover-open {
      animation-name:             appear;
      animation-duration:         .5s;
      animation-timing-function:  ease-in-out;
      animation-fill-mode:        forwards;
  }

  /* For the moment, don't do this as it makes the UI appear flickering when*/
  /* the popover closes. Sadly, there seems to be no way to transition back on close that works on all browsers.*/
  /* For chrome and Safari (not FF yet), we could use a view transition. */
  /*:popover-open::backdrop {*/
  /*    background-color:           color-mix(in hsl, white, transparent 70%);*/
  /*    transition:                 background-color 1s linear;*/
  /*    @starting-style {*/
  /*        background-color:       transparent;*/
  /*    }*/
  /*}*/

  .popover_anchor {
      /* anchor-name will be set on the element */
      position:           relative;
      display:            inline-flex;  /* for FF and Safari or it does not always work */
  }
  .popover_tooltip {
      /* position-anchor will be set on the element */
      position:           absolute;     /* override the popover-hidden default */
      inset:              unset;
      top:                anchor(top);  /* dirty trick for FF and Safari (anchor(bottom) does not work) */
      left:               anchor(left);
      translate:          0 1.2lh;      /* dirty trick for FF and Safari */

      transform-origin:   top center; /* makes expandY a drop-down */
  }
.popover_tooltip:popover-open {
      display:                    flex;              /* override */
      animation-name:             appear, expandY;
  }

  @keyframes appear {
      from { opacity: 0; }
      to   { opacity: 1; }
  }
  @keyframes expandY {
      from {  transform: scaleY(0); }
      to   {  transform: scaleY(1); }
  }

  .icon#icon_christmas_tree {
      fill:             white;
      background-color: transparent;
  }
  .icon#icon_christmas_tree polygon {
      fill:             yellow;
      filter:           brightness(2) drop-shadow(0 0 2em yellow);
      transform:        translateX(-40%) scale(1.2);
      transition:       all 2s ease-in-out;
      @starting-style {
          transform:        translateX(40%) scale(0.8);
      }
  }

.icon#icon_christmas_tree path {
    animation: shake .2s ease-in-out;
    animation-delay: 3s;
}
.icon#icon_christmas_tree path:nth-child(3) {
    transform-origin: center  30%;
}
.icon#icon_christmas_tree path:nth-child(2) {
    transform-origin: center 70% ;
    animation-delay: 3.1s;
}
.icon#icon_christmas_tree path:nth-child(1) {
    transform-origin: center 90% ;
}
@keyframes shake {
      0%   { transform: rotate(  0deg)}
     30%   { transform: rotate(-10deg)}
     60%   { transform: rotate(  6deg)}
    100%   { transform: rotate(  0deg)}
}
